{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Live Status The table below is fed by your AWS API. After deploy, paste your API URL where noted and this page will auto\u2011refresh content when you reload. Loading\u2026 (async () => { const api = \"https://52zmd89soi.execute-api.ca-central-1.amazonaws.com/status\"; // Replace after Terraform outputs try { const res = await fetch(api); const data = await res.json(); const when = new Date(data.timestamp * 1000).toLocaleString(); const rows = data.results.map(r => `<tr><td>${r.url}</td><td>${r.ok ? \"\u2705\" : \"\u274c\"}</td><td>${r.ms ?? \"-\"}</td><td>${r.error ?? \"\"}</td></tr>` ).join(\"\"); document.getElementById(\"status\").innerHTML = `<p>Last check: <b>${when}</b></p> <table> <tr><th>URL</th><th>OK</th><th>Latency (ms)</th><th>Error</th></tr> ${rows} </table>`; } catch(e) { document.getElementById(\"status\").textContent = \"Failed to load status.\"; } })();","title":"Home"},{"location":"#live-status","text":"The table below is fed by your AWS API. After deploy, paste your API URL where noted and this page will auto\u2011refresh content when you reload. Loading\u2026 (async () => { const api = \"https://52zmd89soi.execute-api.ca-central-1.amazonaws.com/status\"; // Replace after Terraform outputs try { const res = await fetch(api); const data = await res.json(); const when = new Date(data.timestamp * 1000).toLocaleString(); const rows = data.results.map(r => `<tr><td>${r.url}</td><td>${r.ok ? \"\u2705\" : \"\u274c\"}</td><td>${r.ms ?? \"-\"}</td><td>${r.error ?? \"\"}</td></tr>` ).join(\"\"); document.getElementById(\"status\").innerHTML = `<p>Last check: <b>${when}</b></p> <table> <tr><th>URL</th><th>OK</th><th>Latency (ms)</th><th>Error</th></tr> ${rows} </table>`; } catch(e) { document.getElementById(\"status\").textContent = \"Failed to load status.\"; } })();","title":"Live Status"},{"location":"architecture/","text":"Architecture & Rationale ```mermaid graph TD EB[EventBridge schedule] --> L1[Lambda: pinger] L1 -->|Put status.json| S3[(S3 bucket)] API[HTTP API] --> L2[Lambda: reader] L2 -->|Get status.json| S3 GH[GitHub Pages (MkDocs)] -->|fetch /status| API","title":"Architecture"},{"location":"architecture/#architecture-rationale","text":"```mermaid graph TD EB[EventBridge schedule] --> L1[Lambda: pinger] L1 -->|Put status.json| S3[(S3 bucket)] API[HTTP API] --> L2[Lambda: reader] L2 -->|Get status.json| S3 GH[GitHub Pages (MkDocs)] -->|fetch /status| API","title":"Architecture &amp; Rationale"},{"location":"setup/","text":"docs/setup.md (usage notes) ```markdown Setup & Operations Change the target URLs via Terraform variable urls . Adjust frequency with schedule_expression (e.g., rate(15 minutes) ). Tear down everything: terraform destroy . Security: Only the reader Lambda is public; S3 bucket blocks public access.","title":"Setup"},{"location":"setup/#setup-operations","text":"Change the target URLs via Terraform variable urls . Adjust frequency with schedule_expression (e.g., rate(15 minutes) ). Tear down everything: terraform destroy . Security: Only the reader Lambda is public; S3 bucket blocks public access.","title":"Setup &amp; Operations"}]}